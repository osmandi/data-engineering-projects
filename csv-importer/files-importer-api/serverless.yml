service: files-importer-api

frameworkVersion: '3'
useDotenv: true

custom:
  wsgi:
    app: app.app

provider:
  name: aws
  runtime: python3.9
  region: ${env:REGION_NAME}
  apiGateway:
    apiKeys:
      - files-importer-api-key
  iam:
   role:
     statements:
       # Allow functions to list all buckets
       - Effect: Allow
         Action: 's3:ListBucket'
         Resource: '*'
       # Allow functions to read/write objects in a bucket
       - Effect: Allow
         Action:
           - 's3:GetObject'
           - 's3:PutObject'
         Resource:
           - '*'
       # Redshift permissions
       - Effect: Allow
         Action:
           - 'redshift-data:BatchExecuteStatement'
           - 'redshift-data:ExecuteStatement'
           - 'redshift-data:CancelStatement'
           - 'redshift-data:ListStatements'
           - 'redshift-data:GetStatementResult'
           - 'redshift-data:DescribeStatement'
           - 'redshift-data:ListDatabases'
           - 'redshift-data:ListSchemas'
           - 'redshift-data:ListTables'
           - 'redshift-data:DescribeTable'
           - 'redshift:DescribeClusters'
           - 'redshift:GetClusterCredentialsWithIAM'
           - 'redshift:GetClusterCredentials'
           - 'ec2:CreateNetworkInterface'
         Resource:
           - '*'
  environment:
    bucketName: ${env:BUCKET_NAME}
    redshiftDbName: ${env:REDSHIFT_DB_NAME}
    redshiftUsername: ${env:REDSHIFT_USERNAME}
    redshiftPassword: ${env:REDSHIFT_PASSWORD}
    redshiftIdentifier: ${env:REDSHIFT_IDENTIFIER}
    awsAccessKey: ${env:AWS_ACCESS_KEY}
    awsSecretKey: ${env:AWS_SECRET_KEY}
    region: ${env:REGION_NAME}

resources:
  Resources:
    bucketBase:
      Type: AWS::S3::Bucket
      DeletionPolicy: Delete
      Properties:
        BucketName: ${self:provider.environment.bucketName}
    redshift:
      Type: AWS::Redshift::Cluster
      DeletionPolicy: Delete
      Properties:
        NodeType: dc2.large
        ClusterIdentifier: ${self:provider.environment.redshiftIdentifier}
        MasterUsername: ${self:provider.environment.redshiftUsername}
        MasterUserPassword: ${self:provider.environment.redshiftPassword}
        DBName: ${self:provider.environment.redshiftDbName}
        ClusterType: single-node
        NumberOfNodes: 1

functions:
  load:
    handler: load.main
    events:
      - s3:
          bucket: ${self:provider.environment.bucketName}
          event: s3:ObjectCreated:*
          existing: true
          rules:
            - suffix: .csv
  api:
    handler: wsgi_handler.handler
    events:
      - http:
          private: true
          path: upload
          method: POST

plugins:
  - serverless-wsgi
  - serverless-python-requirements
